// Generated by CoffeeScript 1.5.0-pre
(function() {
  var Bug, Entity, TdApp,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Entity = (function() {

    Entity.prototype.x = 0;

    Entity.prototype.y = 0;

    Entity.prototype.vx = 1;

    Entity.prototype.vy = 0;

    Entity.prototype.state = "green";

    function Entity(context, x, y) {
      this.context = context;
      this.x = x;
      this.y = y;
    }

    return Entity;

  })();

  Bug = (function(_super) {

    __extends(Bug, _super);

    function Bug() {
      return Bug.__super__.constructor.apply(this, arguments);
    }

    Bug.prototype.update = function() {
      this.x += this.vx;
      this.y += this.vy;
      return this.state = this.x > 200 && this.x < 300 ? "blue" : "green";
    };

    Bug.prototype.draw = function() {
      this.context.fillStyle = this.state === "green" ? 'rgba(0,180,0,0.8)' : 'rgba(0,0,180,0.8)';
      return this.context.fillRect(this.x, this.y, 10, 10);
    };

    return Bug;

  })(Entity);

  TdApp = (function() {

    function TdApp() {}

    TdApp.prototype.main = function() {
      this.createCanvas();
      this.startNewGame();
      return this.addKeyObservers();
    };

    TdApp.prototype.startNewGame = function() {
      this.entities = [];
      this.entities.push(new Bug(this.context, 55, 55));
      return this.runLoop();
    };

    TdApp.prototype.runLoop = function() {
      var _this = this;
      return setTimeout(function() {
        _this.entities.forEach(function(e) {
          return e.update();
        });
        _this.clearCanvas();
        _this.drawField();
        _this.drawEntities();
        if (!_this.terminateRunLoop) {
          return _this.runLoop();
        }
      }, 10);
    };

    TdApp.prototype.drawField = function() {
      this.context.fillStyle = 'rgba(200,150,150,0.8)';
      return this.context.fillRect(50, 50, 600, 400);
    };

    TdApp.prototype.drawEntities = function() {
      var e, _i, _len, _ref, _results;
      _ref = this.entities;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        e = _ref[_i];
        _results.push(e.draw());
      }
      return _results;
    };

    TdApp.prototype.createCanvas = function() {
      this.canvas = $('#canvas')[0];
      this.context = this.canvas.getContext('2d');
      this.canvas.width = document.width;
      return this.canvas.height = document.height;
    };

    TdApp.prototype.clearCanvas = function() {
      return this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
    };

    TdApp.prototype.addKeyObservers = function() {
      var _this = this;
      $(".stop").click(function() {
        return _this.terminateRunLoop = true;
      });
      $(".start").click(function() {
        return _this.terminateRunLoop = true;
      });
      $(".left").click(function() {
        _this.entities[0].vx = -1;
        return _this.entities[0].vy = 0;
      });
      $(".right").click(function() {
        _this.entities[0].vx = 1;
        return _this.entities[0].vy = 0;
      });
      $(".up").click(function() {
        _this.entities[0].vy = -1;
        return _this.entities[0].vx = 0;
      });
      return $(".down").click(function() {
        _this.entities[0].vy = 1;
        return _this.entities[0].vx = 0;
      });
    };

    return TdApp;

  })();

  window.onload = function() {
    var td;
    td = new TdApp;
    return td.main();
  };

}).call(this);
