// Generated by CoffeeScript 1.5.0-pre
(function() {
  var Bug, Entity, GAMESETTINGS, Route, TdApp, Tower,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Route = (function() {

    Route.prototype.points = [];

    Route.prototype.draw = function() {
      var i, _i, _ref;
      this.context.strokeStyle = GAMESETTINGS.route_style;
      this.context.beginPath();
      for (i = _i = 0, _ref = this.points.length - 1; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        this.context.moveTo(this.points[i][0], this.points[i][1]);
        this.context.lineTo(this.points[i + 1][0], this.points[i + 1][1]);
      }
      return this.context.stroke();
    };

    function Route(context, points) {
      this.context = context;
      this.points = points;
    }

    Route.prototype.crossproduct = function(ax, ay, bx, by_, cx, cy) {
      return (cy - ay) * (bx - ax) - (cx - ax) * (by_ - ay);
    };

    Route.prototype.dotproduct = function(ax, ay, bx, by_, cx, cy) {
      return (cx - ax) * (bx - ax) + (cy - ay) * (by_ - ay);
    };

    Route.prototype.between = function(ax, ay, bx, by_, cx, cy) {
      if (Math.abs(this.crossproduct(ax, ay, bx, by_, cx, cy)) > 0) {
        return false;
      }
      if ((this.dotproduct(ax, ay, bx, by_, cx, cy)) < 0) {
        return false;
      }
      if ((this.dotproduct(ax, ay, bx, by_, cx, cy)) >= ((ax - bx) * (ax - bx) + (ay - by_) * (ay - by_))) {
        return false;
      }
      return true;
    };

    Route.prototype.getv = function(x, y) {
      var ax, ay, bx, by_, i, vx, vy, _i, _ref, _ref1, _ref2;
      for (i = _i = 0, _ref = this.points.length - 1; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        _ref1 = this.points[i], ax = _ref1[0], ay = _ref1[1];
        _ref2 = this.points[i + 1], bx = _ref2[0], by_ = _ref2[1];
        if (this.between(ax, ay, bx, by_, x, y)) {
          vx = ax !== bx ? (ax > bx ? -1 : 1) : 0;
          vy = ay !== by_ ? (ay > by_ ? -1 : 1) : 0;
          return [vx, vy];
        }
      }
      return [0, 0];
    };

    return Route;

  })();

  Entity = (function() {

    Entity.prototype.x = 0;

    Entity.prototype.y = 0;

    Entity.prototype.vx = 0;

    Entity.prototype.vy = 0;

    function Entity(context, x, y, route, name) {
      this.context = context;
      this.x = x;
      this.y = y;
      this.route = route;
      this.name = name != null ? name : "unnamed";
    }

    return Entity;

  })();

  Bug = (function(_super) {

    __extends(Bug, _super);

    function Bug() {
      return Bug.__super__.constructor.apply(this, arguments);
    }

    Bug.prototype.hp = 20;

    Bug.prototype.clean = true;

    Bug.prototype.update = function() {
      var _ref;
      _ref = this.route.getv(this.x, this.y), this.vx = _ref[0], this.vy = _ref[1];
      this.x += this.vx;
      return this.y += this.vy;
    };

    Bug.prototype.draw = function() {
      this.context.fillStyle = GAMESETTINGS.bug_fill_style;
      this.context.strokeStyle = this.clean ? GAMESETTINGS.bug_stroke_style : GAMESETTINGS.bug_stroke_style_dirty;
      this.context.beginPath();
      this.context.arc(this.x, this.y, this.hp, 0, Math.PI * 2, true);
      this.context.closePath();
      this.context.fill();
      return this.context.stroke();
    };

    return Bug;

  })(Entity);

  Tower = (function() {

    Tower.prototype.x = 0;

    Tower.prototype.y = 0;

    Tower.prototype.size = 5;

    function Tower(context, x, y) {
      this.context = context;
      this.x = x;
      this.y = y;
    }

    Tower.prototype.draw = function() {
      this.context.fillStyle = GAMESETTINGS.tower_fill_style;
      this.context.strokeStyle = GAMESETTINGS.tower_stroke_style;
      this.context.fillRect(this.x - this.size, this.y - this.size, this.size * 2, this.size * 2);
      return this.context.strokeRect(this.x - this.size, this.y - this.size, this.size * 2, this.size * 2);
    };

    Tower.prototype.shoot = function(entities) {
      var e, _i, _len, _ref;
      this.entities = entities;
      _ref = this.entities;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        e = _ref[_i];
        if (Math.sqrt((e.x - this.x) * (e.x - this.x) + (e.y - this.y) * (e.y - this.y)) < GAMESETTINGS.tower_shoot_radius) {
          this.context.beginPath();
          this.context.strokeStyle = GAMESETTINGS.tower_shoot_style;
          this.context.moveTo(this.x, this.y);
          this.context.lineTo(e.x, e.y);
          this.context.stroke();
          e.hp -= 0.1;
          e.clean = false;
          return true;
        }
      }
    };

    return Tower;

  })();

  TdApp = (function() {

    function TdApp() {}

    TdApp.prototype.timeout = 50;

    TdApp.prototype.towers = [];

    TdApp.prototype.lives = 15;

    TdApp.prototype.score = 0;

    TdApp.prototype.towerscnt = 10;

    TdApp.prototype.random_bug = 0.01;

    TdApp.prototype.main = function() {
      this.createCanvas();
      this.startNewGame();
      return this.addKeyObservers();
    };

    TdApp.prototype.startNewGame = function() {
      this.entities = [];
      this.route = new Route(this.context, GAMESETTINGS.route);
      this.entities.push(new Bug(this.context, 100, 100, this.route, "A"));
      return this.runLoop();
    };

    TdApp.prototype.runLoop = function() {
      var _this = this;
      return setTimeout(function() {
        var e, tower, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _ref, _ref1, _ref2, _ref3, _ref4;
        _this.randomSpawn();
        _ref = _this.entities;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          e = _ref[_i];
          e.update();
        }
        _this.clearBugs();
        _ref1 = _this.entities;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          e = _ref1[_j];
          e.clean = true;
        }
        _this.clearCanvas();
        _this.drawField();
        _this.route.draw();
        _ref2 = _this.towers;
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          e = _ref2[_k];
          e.shoot(_this.entities);
        }
        _ref3 = _this.towers;
        for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
          tower = _ref3[_l];
          tower.draw();
        }
        _ref4 = _this.entities;
        for (_m = 0, _len4 = _ref4.length; _m < _len4; _m++) {
          e = _ref4[_m];
          if (e.hp > 0) {
            e.draw();
          }
        }
        $("#lives").html(_this.lives);
        $("#score").html(_this.score);
        $("#towers").html(_this.towerscnt);
        $("#diff").html(Math.round(_this.random_bug * 100));
        if (!(_this.terminateRunLoop || !_this.lives)) {
          return _this.runLoop();
        }
      }, this.timeout);
    };

    TdApp.prototype.randomSpawn = function() {
      if (Math.random() < this.random_bug) {
        this.entities.push(new Bug(this.context, 100, 100, this.route, Math.round(Math.random() * 15).toString()));
        return this.random_bug += 0.001;
      }
    };

    TdApp.prototype.clearBugs = function() {
      var e, route_last, _i, _j, _len, _len1, _ref, _ref1;
      _ref = this.entities;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        e = _ref[_i];
        if (e.hp <= 0) {
          this.score += 10;
        }
      }
      route_last = this.route.points[this.route.points.length - 1];
      _ref1 = this.entities;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        e = _ref1[_j];
        if (route_last[0] === e.x && route_last[1] === e.y) {
          e.hp = 0;
          this.lives -= 1;
        }
      }
      return this.entities = (function() {
        var _k, _len2, _ref2, _results;
        _ref2 = this.entities;
        _results = [];
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          e = _ref2[_k];
          if (e.hp > 0) {
            _results.push(e);
          }
        }
        return _results;
      }).call(this);
    };

    TdApp.prototype.drawField = function() {
      this.context.fillStyle = 'rgba(200,150,150,0.2)';
      return this.context.fillRect(50, 50, 600, 300);
    };

    TdApp.prototype.createCanvas = function() {
      var _ref;
      this.canvas = $('#canvas')[0];
      this.context = this.canvas.getContext('2d');
      _ref = [document.width, document.height], this.canvas.width = _ref[0], this.canvas.height = _ref[1];
      return this.context.lineWidth = 3;
    };

    TdApp.prototype.clearCanvas = function() {
      return this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
    };

    TdApp.prototype.addKeyObservers = function() {
      var _this = this;
      $(".stop").click(function() {
        return _this.terminateRunLoop = true;
      });
      $(".start").click(function() {
        return _this.runLoop();
      });
      $(".plus").click(function() {
        return _this.timeout = _this.timeout / 2;
      });
      $(".minus").click(function() {
        return _this.timeout = _this.timeout * 2;
      });
      $(".spawn").click(function() {
        return _this.entities.push(new Bug(_this.context, 100, 100, _this.route, Math.round(Math.random() * 15).toString()));
      });
      return $("#canvas").bind('click', function(event) {
        if (_this.towerscnt > 0) {
          _this.towers.push(new Tower(_this.context, event.layerX, event.layerY));
          return _this.towerscnt -= 1;
        }
      });
    };

    return TdApp;

  })();

  window.onload = function() {
    window.td = new TdApp;
    return window.td.main();
  };

  GAMESETTINGS = {
    route: [[100, 100], [100, 200], [200, 200], [200, 100], [300, 100], [300, 300], [400, 300], [400, 100], [520, 100]],
    route_style: "#DDD",
    bug_fill_style: '#090',
    bug_stroke_style: "#040",
    bug_stroke_style_dirty: "#822",
    tower_fill_style: "#008",
    tower_stroke_style: "#0AF",
    tower_shoot_style: "#F00",
    tower_shoot_radius: 150
  };

}).call(this);
